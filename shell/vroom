#!/bin/zsh
# 30/08/2018 update - will only switch to a branch if
# provided as first argument; will warn if changes
# 10/06/2019 update - branch is now -b
# 03/09/2019 update - massive overhaul, adding `start:local`, adding project config
# 03/09/2020 update - annual overhaul
version=9.23.1
usage="$(basename "$0") [-hdelLstv] Five main parts: base, setup, run, watch, destroy. Logs to STDOUT unless -l is provided.
â€¢ Base depends on language, package manager, etc.
â€¢ Setup would be setting up linking, cleaning dist/node_modules, etc, and is not run by default (-s).
â€¢ Run is the main executor of your project locally. If undefined, $0 will do its best to determine what it should be
â€¢ Watch when RunCmd exits (e.g., containerized), use this to run a long-running 'watch' command (-w).
â€¢ Destroy generally undoes all the things that Setup does.
*NOTE: Base is internally handled, while setup, run, and destroy are defined by local .vroom file.
  -h show this message
  -e edit config
  -f fast mode, run without initial setup
  -l log to server.log or provided -Logfile
  -L Change output file (implies -l)
  -s run Setup command, then Run command
  -w run Watch command after Run command
  -D update Destroy command (does not imply -d)
  -d Destroy: only run Destroy command
  -v Prints version info
Examples: (assumes a NodeJS yarn project)
  vroom: Setup NVM, switch to the right NPM version, do 'yarn install', and run the RunCmd
  vroom -e: Edit .vroom file in current directory
  vroom -f: Setup NVM, switch to the right NPM version, run the runCMD
  vroom -s: Setup NVM, switch to the right NPM version, do 'yarn install', run the setupCmd and run the runCmd
  vroom -l: Setup NVM, switch to the right NPM version, do 'yarn install', and run the RunCmd, log all to 'server.log'
  vroom -d: Setup NVM, switch to the right NPM version, do 'yarn install', run the destroyCmd"

echo_cmd() {
  echo $(echo $1 | sed 's/;/;\\n/g')
}

base_project() {
  if [ -d '.git' ]; then
    changes=$(git diff --name-only)
  fi
  files=$(ls -al)

  # Check for project type
  # Node w/ NVM/NPM/Yarn/etc.
  if [[ "$files" =~ ".nvmrc" ]]; then
    echo_cmd "Found .nvmrc file; wiring up NVM"
    # assume things are wired up normally
    source "$NVM_DIR/nvm.sh" > /dev/null 2>&1
    # this is the old style, so support it for now
    if [ $? -ne 0 ]; then
      export NVM_DIR="$HOME/.nvm"
      . "/usr/local/opt/nvm/nvm.sh"
    fi
    nvm install
    if [[ "$files" =~ "yarn.lock" ]]; then
      manager="yarn"
      setup='install'
    else
      manager="npm"
      available=$(npm)
      if [[ "$available" =~ " ci," ]]; then
        setup="ci"
      else
        setup="install"
      fi
    fi
  # PHP
  elif [ -f 'composer.json' ]; then
    manager="composer"
    setup="install"
  fi

  if [ -n "$manager" ]; then
    if [ -z "$fastMode" ]; then
      echo_cmd "Installing dependencies with $manager $setup"
      eval "$manager $setup"
    else
      echo "Fast Mode: Skipping initial $manager $setup"
    fi
  fi
}

configure_setup() {
  if [ -z "$setupCmd" ] || [ -n "$newSetupCommand" ]; then
    if [ -n "$newSetupCommand" ]; then
      setupCmd="$newSetupCommand"
    else
      setupCmd="$manager $setup"
    fi
  fi
}

configure_destroy() {
  if [ -z "$destroyCmd" ] || [ -n "$newDestroyCommand" ]; then
    if [ -n "$newDestroyCommand" ]; then
      destroyCmd="$newDestroyCommand"
    else
      destroyCmd="echo 'Chill. Have a ðŸ¥ƒ'"
    fi
  fi
}

configure_watch() {
  if [ -z "$watchCmd" ] || [ -n "$newWatchCommand" ]; then
    if [ -n "$newWatchCommand" ]; then
      watchCmd="$newWatchCommand"
    else
      watchCmd="echo 'Why not watch a ðŸ¥ƒ'"
    fi
  fi
}

configure_run() {
  if [ -z "$runCmd" ] || [ -n "$newRunCommand" ]; then
    if [ -n "$newRunCommand" ]; then
      runCmd="$newRunCommand"
    else
      set_default_run
    fi
  fi
}

set_default_run() {
  # checks for, in order, `start:local`, `start:dev`, `dev`, `start` as default
  scripts=$(eval "$manager run")
  if [[ "$scripts" =~ '[[:space:]]+start:local[[:space:]]+' ]] ; then
    runCmd="$manager run start:local"
  elif [[ "$scripts" =~ '[[:space:]]+start:dev[[:space:]]+' ]] ; then
    runCmd="$manager run start:dev"
  elif [[ "$scripts" =~ '[[:space:]]+dev[[:space:]]+' ]] ; then
    runCmd="$manager run dev"
  else
    runCmd="$manager run start"
  fi
}

editConfig() {
  if [ ! -f '.vroom' ] ; then
    echo "setupCmd=\nrunCmd=\nwatchCmd=\ndestroyCmd=" > .vroom
  fi
  vi .vroom
}

while getopts ':hefdlstwvL:' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    d) doDestroy="true"
      ;;
    e) editConfig
      exit
      ;;
    f) fastMode="true"
      ;;
    L) logFile="$OPTARG"
      ;;
    l) logToFile="true"
      ;;
    s) doSetup="true"
      ;;
    w) doWatch="true"
      ;;
    v) echo "$version"
      exit
      ;;
  esac
done
shift $((OPTIND -1))

if [ -n "$logToFile" ] || [ -n "$logFile" ]; then
  if [ -z "$logFile" ] ; then
    logFile="server.log"
  fi
  echo "\033[0;31mrun 'less +F $logFile' to see the logs.\033[0m"
  # holy moly, exec redirects script output!
  exec > $logFile
  exec 2>&1
fi
# sets changes, files, manager, and setup
base_project

# Handle updating unchanged branch
if [ -d ".git" ] && [ -z "$changes" ] ; then
  eval "echo 'no local changes, pulling from origin' $cmdSuffix";
  git pull > /dev/null 2>&1
fi

#old: resetCmd, watchCmd, runCmd
#new: setupCmd, runCmd, watchCmd, destroyCmd
config="$(pwd)/.vroom"
if [ -f "$config" ] ; then
  while read -r line; do
    if [ -n "$line" ] && [[ "$line" != "#"* ]] ; then
      declare "$line";
    else
      configComments="$line$configComments"
    fi
  done < "$config"
fi

if [ -n "$resetCmd" ]; then setupCmd="$resetCmd"; fi

configure_setup
configure_run
configure_watch
configure_destroy

# Write out the config
rm $config
if [ -n "$configComments" ] ; then
  echo "$configComments" >> $config
fi
echo "setupCmd=$setupCmd" >> $config
echo "runCmd=$runCmd" >> $config
echo "watchCmd=$watchCmd" >> $config
echo "destroyCmd=$destroyCmd" >> $config

if [[ "$doDestroy" == "true" ]]; then
  echo_cmd "running destroy [$destroyCmd]"
  eval "$destroyCmd"
  exit
fi

if [[ "$doSetup" == "true" ]]; then
  echo_cmd "running setup [$setupCmd]"
  eval "$setupCmd"
fi

echo_cmd "running Run [$runCmd]"
eval "$runCmd"

if [[ "$doWatch" == "true" ]]; then
  echo_cmd "running watch [$watchCmd]"
  eval "$watchCmd"
fi
