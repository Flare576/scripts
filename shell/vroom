#!/bin/zsh
# 30/08/2018 update - will only switch to a branch if
# provided as first argument; will warn if changes
# 10/06/2019 update - branch is now -b
# 03/09/2019 update - massive overhaul, adding `start:local`, adding project config
# 03/09/2020 update - annual overhaul
usage="$(basename "$0") [-lLsStTd] Five main parts: base, setup, run, watch, destroy. Logs to STDOUT unless -l is provided.
â€¢ Base depends on language, package manager, etc.
â€¢ Setup would be setting up linking, cleaning dist/node_modules, etc, and is not run by default (-s).
â€¢ Run is the main executor of your project locally. If undefined, $0 will do its best to determine what it should be
â€¢ Watch when RunCmd exits (e.g., containerized), use this to run a long-running 'watch' command (-w).
â€¢ Destroy generally undoes all the things that Setup does.
*NOTE: Base is internally handled, while setup, run, and destroy are defined by local .vroom file.
  -l log to server.log or provided -Logfile
  -L Change output file (implies -l)
  -s run Setup command, then Run command
  -S update Setup command (does not imply -s)
  -R update Run command
  -W update Watch comamnd (does not imply -w)
  -w run Watch command after Run command
  -D update Destroy command (does not imply -d)
  -d Destroy: only run Destroy command
Examples: (assumes a NodeJS yarn project)
  vroom: Setup NVM, switch to the right NPM version, do 'yarn install', and run the RunCmd
  vroom -s: Setup NVM, switch to the right NPM version, do 'yarn install', run the setupCmd and run the runCmd
  vroom -S \"echo 'hello'\":  Setup NVM, switch to the right NPM version, do 'yarn install', set the setupCmd to \
  vroom -s -S \"echo 'hello'\": Setup NVM, switch to the right NPM version, do 'yarn install', set the setupCmd to \
    echo 'hello', run setupCmd and run the runCmd
  vroom -l: Setup NVM, switch to the right NPM version, do 'yarn install', and run the RunCmd, log all to 'server.log'
  vroom -L 'foo': Setup NVM, switch to the right NPM version, do 'yarn install', and run the RunCmd, log all to 'foo'
  vroom -d: Setup NVM, switch to the right NPM version, do 'yarn install', run the destroyCmd"

echo_log() {
  if [ -n "$logFile" ]; then
    echo $1 >> "$logFile" 2>&1
  else
    echo $1
  fi
}

base_project() {
  changes=$(git diff --name-only)
  files=$(ls -al)

  # Check for project type
  if [[ "$files" =~ ".nvmrc" ]]; then
    echo_log "Found .nvmrc file; wiring up NVM"
    export NVM_DIR="$HOME/.nvm"
    . "/usr/local/opt/nvm/nvm.sh"
    eval "nvm install $cmdSuffix"
    if [[ "$files" =~ "yarn.lock" ]]; then
      manager="yarn"
      setup='install'
    else
      manager="npm"
      available=$(npm)
      if [[ "$available" =~ " ci," ]]; then
        setup="ci"
      else
        setup="install"
      fi
    fi
  fi # Right now just NodeJS

  echo_log "Installing dependencies with $manager $setup"
  eval "$manager $setup $cmdSuffix"
}

configure_setup() {
  if [ -z "$setupCmd" ] || [ -n "$newSetupCommand" ]; then
    if [ -n "$newSetupCommand" ]; then
      setupCmd="$newSetupCommand"
    else
      setupCmd="$manager $setup"
    fi
  fi
}

configure_destroy() {
  if [ -z "$destroyCmd" ] || [ -n "$newDestroyCommand" ]; then
    if [ -n "$newDestroyCommand" ]; then
      destroyCmd="$newDestroyCommand"
    else
      destroyCmd="./nuke.sh"
    fi
  fi
}

configure_watch() {
  if [ -z "$watchCmd" ] || [ -n "$newWatchCommand" ]; then
    if [ -n "$newWatchCommand" ]; then
      watchCmd="$newWatchCommand"
    else
      watchCmd="echo 'ðŸ¥ƒ'"
    fi
  fi
}

configure_run() {
  if [ -z "$runCmd" ] || [ -n "$newRunCommand" ]; then
    if [ -n "$newRunCommand" ]; then
      runCmd="$newRunCommand"
    else
      set_default_run
    fi
  fi
}

set_default_run() {
  # checks for, in order, `start:local`, `dev`, `start` as default
  scripts=$(eval "$manager")
  if [[ "$scripts" =~ '[[:space:]]+start:local[[:space:]]+' ]] ; then
    runCmd="$runCmdNew start:local"
  elif [[ "$scripts" =~ '[[:space:]]+dev[[:space:]]+' ]] ; then
    runCmd="$runCmdNew dev"
  else
    runCmd="$runCmdNew start"
  fi
}

while getopts ':hdlstwD:L:R:S:T:W:' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
    d) doDestroy="true"
      ;;
    D) newDestroyCmd="$OPTARG"
      ;;
    L) logFile="$OPTARG"
      ;;
    l) logToFile="true"
      ;;
    r) newRunCmd="$OPTARG"
      ;;
    s) doSetup="true"
      ;;
    S) newSetupCommand="$OPTARG"
      ;;
    w) doWatch="true"
      ;;
    T) newWatchCommand="$OPTARG"
      ;;
  esac
done
shift $((OPTIND -1))

cmdSuffix=''
if [ -n "$logToFile" ] || [ -n "$logFile" ]; then
  if [ -z "$logFile" ] ; then
    logFile="server.log"
  fi
  echo "\033[0;31mrun 'less +F $logFile' to see the logs.\033[0m"
  if [ -f "$logFile" ]; then cp "$logFile" "$logFile.bkp"; fi
  echo 'hello world' > $logFile
  cmdSuffix=">> \"$logFile\" 2>&1"
fi
# sets changes, files, manager, and setup
base_project

# Handle updating unchanged branch
if [ -z "$changes" ] ; then
  eval "echo 'no local changes, pulling from origin' $cmdSuffix";
  git pull > /dev/null 2>&1
fi

#old: resetCmd, watchCmd, runCmd
#new: setupCmd, runCmd, watchCmd, destroyCmd
config="$(pwd)/.vroom"
if [ -f "$config" ] ; then
  while read -r line; do declare "$line"; done < "$config"
fi

if [ -n "$resetCmd" ]; then setupCmd="$resetCmd"; fi

configure_setup
configure_run
configure_watch
configure_destroy

# Write out the config
echo "setupCmd=$setupCmd" > $config
echo "runCmd=$runCmd" >> $config
echo "watchCmd=$watchCmd" >> $config
echo "destroyCmd=$destroyCmd" >> $config

if [[ "$doDestroy" == "true" ]]; then
  echo_log "running destroy [$destroyCmd]"
  eval "$destroyCmd $cmdSuffix"
  exit
fi

if [[ "$doSetup" == "true" ]]; then
  echo_log "running setup [$setupCmd]"
  eval "$setupCmd $cmdSuffix"
fi

echo_log "running Run [$runCmd]"
eval "$runCmd $cmdSuffix"

if [[ "$doWatch" == "true" ]]; then
  echo_log "running watch [$watchCmd]"
  eval "$watchCmd $cmdSuffix"
fi
