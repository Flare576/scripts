#!/bin/sh
usage="$(basename "$0") Clones the supplied URL down, updates the gitConfig to include the .gitconfig one folder up.
It works best if you follow a structure like
|- company1
|--- .gitConfig
|--- projectA
|----- .git
|--- projectB
|----- .git
|- company2
|--- .gitConfig
|----- projectC
|----- .git

etc., where each company has its own .gitconfig with user.name and user.email.

-p  Updates the github URLS to have a -{arg} suffix (See github setup scripts)
-b  Checks out a specific branch of the project before continuing
-r  Recursively checkout (for projects with submodules)"

while getopts ':rp:b:h' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    p) prefix="$OPTARG"
      ;;
    b) branch="$OPTARG"
      ;;
    r) recurse="deep"
      ;;
  esac
done
shift $((OPTIND -1))

repo="$1"
root=$(pwd)
# https://www.tldp.org/LDP/abs/html/string-manipulation.html
name=${repo##*/} # Deletes longest instance of * (anything)/ (the slash) from front
name=${name%.git} # Deletes shortest instance of ".git" from back
command="git clone"
include="[include]
  path = ${root}/.gitconfig"

if [ -n "$prefix" ]; then
  repo=${repo/git@github.com/git@github.com-$prefix}
fi

echo "You're checking out $repo ($name) with -$prefix ssh prefix"

if [ -n "$branch" ]; then
  echo "defaulting to $branch branch"
  command="git clone -b $branch"
fi

if [ -n "$recurse" ]; then
  echo "with its submodules"
  echo "Cloning into '$root/$name' ..."
  $command $repo --recursive > /dev/null 2>&1
else
  $command $repo
fi

cd $name

echo $include >> .git/config

if [ -n "$prefix" ]; then
  sed -i '' -e "s/git@github.com:/git@github.com-$prefix:/" ./.git/config
  if [ -n "$recurse" ]; then
    sed -i '' -e "s/git@github.com:/git@github.com-$prefix:/" ./.gitmodules
    git submodule update --init --recursive
    for D in `find ./.git/modules -type d -maxdepth 1 ! -path ./.git/modules`
    do
      echo $include >> $D/config
      sed -i '' -e "s/git@github.com:/git@github.com-$prefix:/" "$D/config"
    done
  fi
fi
