#!/usr/local/bin/python3

import argparse, sys
from configparser import ConfigParser
import os
import jq
import json
import yaml
from shutil import rmtree, copy
from subprocess import check_output, run
from git import Repo

def writeConfig (newAdd = ""):
    with open(mainCompose, 'w') as file:
        if newAdd: volumes.add(newAdd)
        fullCompose['services'][service]['volumes'] = list(volumes)
        yaml.dump(fullCompose, file)

def recreate ():
    if not override:
        last_args = ['docker-compose']
        for conf in configs:
            last_args.extend(['-f', conf])
        last_args.extend(['up', '-d'])

        print(f'Refreshing containers')
        run(last_args)
    else:
        os.system(override)

# Command definiton
description = "handles volume mappings for local docker-compose."
configFolder = f'{os.environ.get("HOME")}/.config/dvol'
configStore = f'{configFolder}/config.ini'

parser = argparse.ArgumentParser(description)
parser.add_argument("-c", "--container", help = "Container name")
parser.add_argument("-d", "--default", help = "Save these arguments as defaults", action = 'store_true')
parser.add_argument("-e", "--echo", help = "Echo the current defaults", action = 'store_true')
parser.add_argument("-f", "--file", help = "Print file path to main docker-compose YAML file", action = 'store_true')
parser.add_argument("-l", "--local", help = "Local root folder", default='/tmp')
parser.add_argument("-n", "--nuke", help = "Implies -g, destroy {root}/{service}_volumes", action = 'store_true')
parser.add_argument("-o", "--override", help = "Command to restart containers")
parser.add_argument("-r", "--restore", help = "Restore docker-compose from Git", action = 'store_true')
parser.add_argument("-s", "--service", help = "'service' from docker-compose")
parser.add_argument("-u", "--update", help = "Remove local copy and re-sync from container", action = 'store_true')
parser.add_argument("remote", help = "Remote folder to add/map.", nargs='?')
args = parser.parse_args()

# Config management
config = ConfigParser()
config.read(configStore)

if os.path.isfile(configStore):
    # --config spits out the current config and exits
    if args.echo:
        quick_conf = open(configStore).read()
        print(quick_conf)
        quit()
else:
    if args.echo:
        print("no config to print")
        quit()
    else:
        os.makedirs(configFolder)
        config['default'] = {}

if args.container: config['default']['DOCKER_CONTAINER'] = args.container
if not args.override == None: config['default']['DOCKER_OVERRIDE'] = args.override
if args.service: config['default']['DOCKER_SERVICE'] = args.service
if args.local: config['default']['DOCKER_VOLUMES_ROOT'] = args.local

if args.default:
    with open(configStore, 'w') as configfile:
        config.write(configfile)

# Local variables / syntax sugar
default = config['default']
container = default['DOCKER_CONTAINER']
override = default['DOCKER_OVERRIDE']
root = default['DOCKER_VOLUMES_ROOT']
service = default['DOCKER_SERVICE']
folder = args.remote
localRoot = f'{root}/{service}_volumes'
localDir = f'{localRoot}{folder}'

# Validation
running = check_output(['docker', 'ps']).decode(sys.stdout.encoding)
if container not in running:
    print(f'It doesn\'t look like {container} is running... exiting')
    quit()

# All operations need to know working dir and configs
inspect = check_output(["docker", "container", "inspect", container]).decode(sys.stdout.encoding)
inspect = json.loads(inspect)
workingDir = jq.compile('.[0].Config.Labels."com.docker.compose.project.working_dir"').input(inspect).first()
configs = jq.compile('.[0].Config.Labels."com.docker.compose.project.config_files" | split(",")').input(inspect).first()
# Convert all configs to absolute reference
for idx, config in enumerate(configs):
    configs[idx] = f'{workingDir}/{config.split("/")[-1]}'

# We'll only be editing the first (or "Main") YAML file
mainCompose = configs[0]
mainBackup = f'{mainCompose}.dvol'

# -p/--print just spits back the filename
if args.file:
    print(mainCompose)
    quit()

# -n/--nuke deletes the local volumes and implies -r/--restore
if args.nuke:
    print(f'Removing [31m{localRoot}[0m')
    try:
        rmtree(localRoot)
    except:
        print("'twas already gone.")

# Before the first time we map a volume we make a backup copy of the virgin config; time to put it back
if args.restore or args.nuke:
    print(f'Restoring [31m{mainCompose}[0m from [47m{mainCompose}.dvol[0m')
    os.rename(mainBackup, mainCompose)
    recreate()
    quit()

# The rest of the commands require a folder argument
if not folder:
    print(f'Most operations require a remote folder path; check --help for details')
    quit()

# Make a backup of the current mainConfig if not already there
if not os.path.isfile(mainBackup):
    print(f'Making backup file [31m{mainBackup}[0m')
    copy(mainCompose, mainBackup)
localDir = f'{root}/{container}_volumes{folder}'

# Load current volumes
with open(mainCompose, 'r+') as file:
    fullCompose = yaml.safe_load(file.read())
    volumes = set(fullCompose['services'][service]['volumes'])

# -u/--update will destroy the existing folder if it is there with the intent of pulling down a fresh remote copy
# This may require an extra continer restart
if os.path.isdir(localDir) and args.update:
    for volume in volumes:
        if localDir in volume:
            print(f'Removing [47m{localDir}[0m mapping, then refreshing containers.')
            volumes.remove(volume)
            writeConfig()
            recreate()
            break
    print(f'Removing [47m{localDir}[0m.')
    rmtree(localDir)
if not os.path.isdir(localDir):
    os.makedirs(localDir)
    print(f'Copying [47m{folder}[0m from [47m{container}[0m to [47m{localDir}[0m')
    run(["docker", "cp", f'{container}:{folder}/.', localDir])
    print(f'Initializing Git repo at [47m{localDir}[0m')
    repo = Repo.init(localDir)
    repo.git.add(A=True)
    repo.index.commit("initial dvol call")
else:
    print(f'Not Copying [47m{folder}[0m from [47m{container}[0m to [47m{localDir}[0m; Run with --update if desired')


print(f'Updating [47m{mainCompose}[0m')
writeConfig(f'{localDir}:{folder}')
recreate()

