#!/bin/sh
":" //;NODE_PATH=$(npm -g root) exec node -r $(dirname $0)/sideLoad.js -- "$0" "$@"
const usage = `Adds specified files (or all if none specified) to git staging and commits (if -m used) or starts a \
verbose commit.`;
const argv = require('yargs')
  .usage(usage)
  .alias('help', 'h')
  .option( 'amend', { alias: 'a', type: 'boolean', description: 'Flag to ammend previous commit' })
  .option( 'file', { alias: 'f', type: 'array', description: 'List of files to add, defaults to `.`' })
  .option( 'fileSkip', { alias: 'F', type: 'array', description: 'List of files to IGNORE' })
  .option( 'message', { alias: 'm', type: 'string', description: 'Message to pass to commit. Omit for -v' })
  .option( 'no-verify', {alias: 'n', type: 'boolean', description: 'Passed through to git commit' })
  .option( 'skip', { alias: 's', type: 'boolean', description: 'Skip Adding files' })
  .option( 'push', { alias: 'p', type: 'boolean', description: 'Flag to push after commit' })
  .option( 'version', { alias: 'v', type: 'boolean', description: 'Jenkins requires npm version bump' })
  .example( 'gac', 'Adds all files/subfolder files, then opens a verbose commit' )
  .example( 'gac -j', 'Adds all files/subfolder files, then opens a verbose commit, then perfoms npm version bump' )
  .example( 'gac -a', 'Adds all files/subfolder files, then opens the LAST commit in amment/verbose' )
  .example( 'gac -f myFile', 'Adds `myFile` to stage, then opens verbose commit' )
  .example( 'gac -nf myFile', 'Adds `myFile` to stage, skips verification, then opens verbose commit' )
  .example( 'gac -sp', 'Only pushes to origin' )
  .example( 'gac -sa', 'Opens last commit as ammend in verbose mode' )
  .argv;
const inquirer = require('inquirer');
const {execSync, spawn} = require('child_process');

(async () => {
  if (!argv.skip) {
    let files = '.';
    if (argv.file) {
      files = argv.file.join(' ');
    }

    execSync(`git add ${files}`, { encoding: 'utf8' });
    if (argv.fileSkip) {
      execSync(`git reset ${argv.fileSkip.join(' ')}`, { encoding: 'utf8' });
    }
  }
  let childArgs = ['commit', '--verbose'];
  if (argv.amend) {
    childArgs.push('--amend');
  }
  if (argv.message) {
    childArgs.push(`-m ${argv.message}`);
  }
  if (argv.noVerify) {
    childArgs.push('-n');
  }

  let errors = '';
  const git = spawn('git', childArgs, {stdio: [ 'inherit', 'inherit', 'pipe' ]});
  git.stderr.on('data', (data) => {
    errors+=data;
    console.log(data.toString('utf8'));
  });
  git.on('close', (code) => {
    if ( argv.version ) {
      execSync(`npm version patch -m "Don't Break the Pipe" --commit-hooks=false --git-tag-version=false`);
    }
    if ( argv.push && (
      code === 0
      || errors === ''
      || errors.includes('No changes detected')
    )){
      execSync('git push');
    }
  });
})();
// vim: ft=javascript
