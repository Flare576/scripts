#!/bin/sh
usage="$(basename "$0") [-cdhr] [<branch>]'Merge Master Branch' manages merging with master. Optionally, resets \
  working branch (-d), fetches from origin, starts merge or rebase if [-r] provided.
  -c Clean up .orig files and exit
  -d Delete working branch
  -r Runs rebase instead of merge
  <branch> Branch to use instead of master"

while getopts ':hcdr' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
    d) delete="true"
       ;;
    c) clean="true"
       ;;
    r) rebase="true"
       ;;
  esac
done
shift $((OPTIND -1))

if [ "$clean" == "true" ] ; then
  find . -type f -name "*.orig" -exec mv {} /tmp/ \;
  echo ".orig files moved to /tmp"
  exit
fi

# Preference order is $1, $MASTER_OVERRIDE, main, master
BRANCH="main"
hasMaster="$(git branch | grep ' \+master$')"
hasMain="$(git branch | grep ' \+main$')"
if [ -n "$1" ]; then
  BRANCH="$1"
elif [ -n "$MASTER_OVERRIDE" ] ; then
  BRANCH="$MASTER_OVERRIDE"
elif [ -n "$hasMaster" ]; then
  if [ -n "$hasMain" ]; then
    echo "Project has main and master branches; using main, but be careful."
  else
    BRANCH="master"
  fi
fi
BRANCH="origin/$BRANCH"

current=$(git branch | grep \* | cut -d ' ' -f2)
changes=$(git diff HEAD)
git fetch

if [ -n "$changes" ] ; then
  if [ "$delete" == "true" ] ; then
    git reset --hard
  else
    git stash
  fi
fi

if [ -n "$rebase" ] ; then
  git rebase -i "$BRANCH"
  lastcode=$?
  if [ $lastcode -ne 0 ] ; then
    echo "git rebase -i returned non-zero result code: $lastcode"
  fi
else
  git merge "$BRANCH"
  lastcode=$?
  if [ $lastcode -ne 0 ] ; then
    echo "git merge returned non-zero result code: $lastcode"
  fi
fi

if [ $lastcode -ne 0 ] ; then
    echo "****\nThere were merge conflicts.\n****\n Starting merge with mergetool, but if you want to stop, just exit \
vim with ':cq' and then Ctrl+C"
    read -p ""
    lastcode=0

    while [ $lastcode -eq 0 ]
    do
      git mergetool
      lastcode=$?
      if [ $lastcode -eq 0 ]; then
        if [ -n "$rebase" ]; then
          git rebase --continue 2> /dev/null
          lastcode=$?
        else
          git commit
          lastcode=1
        fi
      else
        echo "git mergetool returned non-zero result code: $lastcode"
      fi
    done
fi

dirtyMerge=$(git diff HEAD)
if [ -n "$changes" ] && [ "$delete" != "true" ] ; then
  if [ -n "$dirtyMerge" ] ; then
    echo "I stashed your changes, but since the merge went... questionably, I didn't un-stash. ($dirtyMerge)"
  else
    git stash pop
  fi
fi
